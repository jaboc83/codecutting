{"version":3,"sources":["webpack:///./src/components/project-showcases/elite.tsx","webpack:///./src/components/project-showcases/hubble.tsx","webpack:///./src/components/project-showcases/ynab-sdk.tsx","webpack:///./src/components/project-showcases/ttmg.tsx","webpack:///./src/components/project-showcases/rangers.tsx","webpack:///./src/components/project-showcases/spokgo.tsx","webpack:///./src/pages/projects.tsx"],"names":["EliteImage","data","useStaticQuery","className","fixed","placeholderImage","childImageSharp","alt","Elite","id","href","HubbleImage","Hubble","YNABSDKImage","YNABSDK","TTMGImage","TTMG","RangersImage","Rangers","SpokGoImage","SpokGo","Projects","title","to","target","rel"],"mappings":"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","file":"component---src-pages-projects-tsx-512f137cad7e61c2d6a4.js","sourcesContent":["// 3rd Party\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n// Images\nconst EliteImage = () => {\n  // GraphQl hooks\n  const data = useStaticQuery(graphql`\n    query EliteImageQuery {\n      placeholderImage: file(relativePath: { eq: \"imagetrend-elite.png\" }) {\n        childImageSharp {\n          fixed(width: 180) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Img\n      className=\"block m-auto md:max-w-3xl shadow-md mb-4\"\n      fixed={data.placeholderImage.childImageSharp.fixed}\n      alt=\"Elite Field Demo\"\n    />\n  )\n}\n\n// Component\nconst Elite: React.FC = () => {\n  return (\n    <div\n      id=\"elite-showcase\"\n      className=\"flex flex-col justify-center text-justify m-4\"\n    >\n      <a href=\"https://www.imagetrend.com/Elite\">\n        <h2 className=\"text-blue-500 text-2xl font-bold text-center\">\n          ImageTrend Elite\n        </h2>\n      </a>\n      <EliteImage />\n      <h3 className=\"text-gray-700 flex flex-col lg:flex-row justify-between text-sm mb-2\">\n        <span className=\"px-2 max-w-xl\">\n          <strong>Contributions:</strong> 2013-2018\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Technology:</strong> ASP.NET MVC, JS w/ KnockoutJS, MSSQL,\n          Powershell\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Roles:</strong> Dev Lead, DevOps, Architect\n        </span>\n      </h3>\n      <p className=\"font-fancy\">\n        ImageTrend Elite is a data collection tool primarily used for EMS and\n        Fire data. The application consists of a couple applications. The first\n        application is designed mainly for administrators and is written in a\n        combination of ASP.NET MVC and JavaScript. The second part is a PWA\n        written mainly in JavaScript and is used for offline data collection at\n        patient-side.\n      </p>\n      <p className=\"font-fancy\">\n        This project was unique at the time it was started as PWAs were not yet\n        terribly common and browser features not quite as rich. As the front-end\n        frameworks of the time were pretty large and offline storage\n        capabilities fairly weak we opted to build our application using\n        primarily vanilla JS with some help from KnockoutJS.\n      </p>\n    </div>\n  )\n}\n\nexport default Elite\n","// 3rd Party\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n// Images\nconst HubbleImage = () => {\n  // GraphQl hooks\n  const data = useStaticQuery(graphql`\n    query HubbleImageQuery {\n      placeholderImage: file(relativePath: { eq: \"imagetrend-hubble.png\" }) {\n        childImageSharp {\n          fixed(width: 180) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Img\n      className=\"block m-auto md:max-w-3xl shadow-md mb-4\"\n      fixed={data.placeholderImage.childImageSharp.fixed}\n      alt=\"Hubble Screenshot\"\n    />\n  )\n}\n\n// Component\nconst Hubble: React.FC = () => {\n  return (\n    <div\n      id=\"hubble-showcase\"\n      className=\"flex flex-col justify-center text-justify m-4\"\n    >\n      <h2 className=\"text-gray-900 text-2xl font-bold text-center\">\n        ImageTrend Hubble / Orbit\n      </h2>\n      <HubbleImage />\n      <h3 className=\"text-gray-700 flex flex-col lg:flex-row justify-between text-sm mb-2 text-left\">\n        <span className=\"px-2 max-w-xl\">\n          <strong>Contributions:</strong> 2018-Present\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Technology:</strong> ASP.NET Core, React, TypeScript,\n          CosmosDB, Azure Functions, Azure Data Lake, Azure Analysis Services,\n          Powershell\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Roles:</strong> Developer, DevOps, Designer, Architect\n        </span>\n      </h3>\n      <p className=\"font-fancy\">\n        ImageTrend Hubble is a simple internal web application that is used to\n        monitor and administrate a separate internal big data infrastructure\n        project called ImageTrend Orbit.\n      </p>\n      <p className=\"font-fancy\">\n        Hubble runs on React+TS+MVC Core, and Orbit is a large series of\n        serverless functions and Azure data storage technologies for ingesting,\n        processing and egressing datasets within the company. I worked on both\n        projects in tandem.\n      </p>\n    </div>\n  )\n}\n\nexport default Hubble\n","// 3rd Party\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n// Images\nconst YNABSDKImage = () => {\n  // GraphQl hooks\n  const data = useStaticQuery(graphql`\n    query YNABSDKImageQuery {\n      placeholderImage: file(relativePath: { eq: \"ynab-sdk.png\" }) {\n        childImageSharp {\n          fixed(width: 180) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Img\n      className=\"block m-auto md:max-w-3xl shadow-md mb-4\"\n      fixed={data.placeholderImage.childImageSharp.fixed}\n      alt=\"YNAB SDK Screenshot\"\n    />\n  )\n}\n\n// Component\nconst YNABSDK: React.FC = () => {\n  return (\n    <div\n      id=\"ynab-sdk-showcase\"\n      className=\"flex flex-col justify-center text-justify m-4\"\n    >\n      <h2 className=\"text-blue-500 text-2xl font-bold text-center\">\n        <a href=\"https://www.nuget.org/packages/YNAB.SDK/\">\n          YNAB .net Core SDK\n        </a>\n      </h2>\n      <YNABSDKImage />\n      <h3 className=\"text-gray-700 flex flex-col lg:flex-row justify-between text-sm mb-2 text-left\">\n        <span className=\"px-2 max-w-xl\">\n          <strong>Contributions:</strong> 2019-Present\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Technology:</strong> ASP.NET Core{\" \"}\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Roles:</strong> Developer\n        </span>\n      </h3>\n      <p className=\"font-fancy\">\n        YNAB.SDK is a .net core wrapper for the YNAB Rest API. YNAB is one of my\n        favorite products and I wanted to contribute back to the community in\n        some way. At the time there were .NET SDK implementations, but none in\n        .net core so I decided to make this one.\n      </p>\n    </div>\n  )\n}\n\nexport default YNABSDK\n","// 3rd Party\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n// Images\nconst TTMGImage = () => {\n  // GraphQl hooks\n  const data = useStaticQuery(graphql`\n    query TTMGImageQuery {\n      placeholderImage: file(relativePath: { eq: \"ttmg.png\" }) {\n        childImageSharp {\n          fixed(width: 180) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Img\n      className=\"block m-auto md:max-w-3xl shadow-md mb-4\"\n      fixed={data.placeholderImage.childImageSharp.fixed}\n      alt=\"Talk to Me Goose Screenshot\"\n    />\n  )\n}\n\n// Component\nconst TTMG: React.FC = () => {\n  return (\n    <div\n      id=\"ttmg-showcase\"\n      className=\"flex flex-col justify-center text-justify m-4\"\n    >\n      <h2 className=\"text-blue-500 text-2xl font-bold text-center\">\n        <a href=\"https://github.com/jaboc83/talktomegoose\">Talk to Me Goose</a>\n      </h2>\n      <TTMGImage />\n      <h3 className=\"text-gray-700 flex flex-col lg:flex-row justify-between text-sm mb-2 text-left\">\n        <span className=\"px-2 max-w-xl\">\n          <strong>Contributions:</strong> 2018-Present\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Technology:</strong> C#{\" \"}\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Roles:</strong> Developer\n        </span>\n      </h3>\n      <p className=\"font-fancy\">\n        Talk to Me Goose is a simple console application for Windows that allows\n        the user to setup audio cues for in-game events as a training tool for\n        League of Legends. The application can either use pre-recorded audio\n        clips or it can use text-to-speech to read the alerts.\n      </p>\n    </div>\n  )\n}\n\nexport default TTMG\n","// 3rd Party\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n// Images\nconst RangersImage = () => {\n  // GraphQl hooks\n  const data = useStaticQuery(graphql`\n    query RangersImageQuery {\n      placeholderImage: file(relativePath: { eq: \"mnrangers.png\" }) {\n        childImageSharp {\n          fixed(width: 180) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Img\n      className=\"block m-auto md:max-w-3xl shadow-md mb-4\"\n      fixed={data.placeholderImage.childImageSharp.fixed}\n      alt=\"MN Rangers Screenshot\"\n    />\n  )\n}\n\n// Component\nconst Rangers: React.FC = () => {\n  return (\n    <div\n      id=\"mnrangers-showcase\"\n      className=\"flex flex-col justify-center text-justify m-4\"\n    >\n      <h2 className=\"text-blue-500 text-2xl font-bold text-center\">\n        <a href=\"https://github.com/jaboc83/mnrangers\">MN Rangers Website</a>\n      </h2>\n      <RangersImage />\n      <h3 className=\"text-gray-700 flex flex-col lg:flex-row justify-between text-sm mb-2 text-left\">\n        <span className=\"px-2 max-w-xl\">\n          <strong>Contributions:</strong> 2015-2017\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Technology:</strong> NodeJS, Express{\" \"}\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Roles:</strong> Developer, Designer\n        </span>\n      </h3>\n      <p className=\"font-fancy\">\n        The Minnesota Rangers website was a hub for all things related to the\n        former minor league basketball team. It had news, schedules, roster\n        information, and stats. The site and team are no longer active.\n      </p>\n    </div>\n  )\n}\n\nexport default Rangers\n","// 3rd Party\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n// Images\nconst SpokGoImage = () => {\n  // GraphQl hooks\n  const data = useStaticQuery(graphql`\n    query SpokGoImageQuery {\n      placeholderImage: file(relativePath: { eq: \"spok-go.png\" }) {\n        childImageSharp {\n          fixed(width: 180) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Img\n      className=\"block m-auto md:max-w-3xl shadow-md mb-4\"\n      fixed={data.placeholderImage.childImageSharp.fixed}\n      alt=\"Spok Go Demo\"\n    />\n  )\n}\n\n// Component\nconst SpokGo: React.FC = () => {\n  return (\n    <div\n      id=\"spok-go-showcase\"\n      className=\"flex flex-col justify-center text-justify m-4\"\n    >\n      <a href=\"https://www.spok.com/spok-go/\">\n        <h2 className=\"text-blue-500 text-2xl font-bold text-center\">\n          Spok Go\n        </h2>\n      </a>\n      <SpokGoImage />\n      <h3 className=\"text-gray-700 flex flex-col lg:flex-row justify-between text-sm mb-2\">\n        <span className=\"px-2 max-w-xl\">\n          <strong>Contributions:</strong> 2020-Present\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Technology:</strong> ASP.NET MVC, C#, golang, Typescript,\n          React, Powershell\n        </span>\n        <span className=\"px-2 max-w-xl\">\n          <strong>Roles:</strong> Senior Software Engineer\n        </span>\n      </h3>\n      <p className=\"font-fancy\">\n        Spok Go is an encrypted communications platform for enhancing clinical\n        workflows and improving patient care.\n      </p>\n      <p className=\"font-fancy\">\n        This project had me working on many security features including MFA,\n        auth flows, message encryption, and audit log generation and reporting.\n        I was also involved in designing and implementing a backup policy for\n        application data accross multiple teams, and implementing CICD pipelines\n        using Jenkins. The majority of the work was done using C# and golang and\n        making heavy use of AWS resources and a serverless architecture.\n      </p>\n    </div>\n  )\n}\n\nexport default SpokGo\n","// 3rd Party\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\n// Other Components\nimport Layout from \"../components/layout/layout\"\nimport SEO from \"../components/seo\"\nimport Elite from \"../components/project-showcases/elite\"\nimport Hubble from \"../components/project-showcases/hubble\"\nimport YNABSDK from \"../components/project-showcases/ynab-sdk\"\nimport TTMG from \"../components/project-showcases/ttmg\"\nimport Rangers from \"../components/project-showcases/rangers\"\nimport SpokGo from \"../components/project-showcases/spokgo\"\n\n// Component\nconst Projects: React.FC = () => {\n  return (\n    <Layout>\n      <div className=\"container flex flex-col justify-center m-auto\">\n        <SEO title=\"projects\" />\n        <h1 className=\"mt-4 text-3xl font-bold text-center\">Projects</h1>\n        <p className=\"mb-8 p-4 font-fancy text-center text-lg max-w-2xl text-justify m-auto\">\n          Aside from{\" \"}\n          <Link to=\"/\" className=\"text-blue-500\">\n            this very site\n          </Link>\n          , I have a variety of other products I have built that you can check\n          out below. You can always see what I&apos;m currently working on by\n          checking out my{\" \"}\n          <a\n            href=\"https://github.com/jaboc83\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-blue-500\"\n          >\n            github.\n          </a>\n        </p>\n        <hr />\n        <SpokGo />\n        <hr />\n        <Hubble />\n        <hr />\n        <YNABSDK />\n        <hr />\n        <Elite />\n        <hr />\n        <TTMG />\n        <hr />\n        <Rangers />\n      </div>\n    </Layout>\n  )\n}\n\nexport default Projects\n"],"sourceRoot":""}